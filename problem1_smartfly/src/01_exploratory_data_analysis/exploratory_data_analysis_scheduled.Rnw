\documentclass{article}
\usepackage[sc]{mathpazo}
\usepackage[T1]{fontenc}
\usepackage{geometry}
\geometry{verbose,tmargin=2.5cm,bmargin=2.5cm,lmargin=2.5cm,rmargin=2.5cm}
\usepackage{fullpage}
\usepackage{pdflscape}
\setcounter{secnumdepth}{2}
\setcounter{tocdepth}{2}
\usepackage{datetime}
\usepackage{url}
\usepackage[unicode=true,pdfusetitle,
 bookmarks=true,bookmarksnumbered=true,bookmarksopen=true,bookmarksopenlevel=2,
 breaklinks=false,pdfborder={0 0 1},backref=false,colorlinks=false]
 {hyperref}
\hypersetup{
 pdfstartview={XYZ null null 1}}
\begin{document}
\flushbottom

<<setup, include=FALSE, cache=FALSE>>=
library(knitr)
library(ggplot2)
# set global chunk options
opts_chunk$set(fig.path='figure/scheduled-', fig.align='center', fig.show='hold')
options(formatR.arrow=TRUE,width=90)
@

\date{\currenttime, \today}
\title{SmartFly: Exploratory Analysis For Scheduled Flight Data}
\author{Cindy Lamm}

\maketitle

Assuming that scheduled flight data and historic flight data have the same variables, I 
load these variable names and types of historic data (prepared in an additional csv file):
<<setup-defaults, include=FALSE>>==
rm(list=ls())   #clear memory
@

<<load-meta-data>>=
nameTypeDataFile  <- "../01_exploratory_data_analysis/resources/raw_variables.csv"
variableNames <- read.csv(nameTypeDataFile, header=TRUE, stringsAsFactors=FALSE) 
variableNames
factorIdx <- which(variableNames$type=="factor")
factorNames <- variableNames$name[factorIdx]
@

Then load scheduled data into R. As I did for the historic data I set empty strings to \verb+NA+ (here because of variable \verb+tail_number+).
% this takes about 2 minutes 
<<load-scheduled-data>>=
scheduledDataFile <- "../../data/smartfly_scheduled.csv"
predictDataTyped <- read.csv(scheduledDataFile, header=FALSE, stringsAsFactors=FALSE, 
                           col.names=variableNames$name, colClasses=variableNames$type,
                           na.strings=c("NA",""))
@

\pagebreak

Checkout data content:
<<str-scheduled-data>>=
str(predictDataTyped)
@

As I did for the historic data the variables \verb+scheduled_departure_time+ and \verb+scheduled_arrival_time+ are first reformatted and then truncated to the hour.
<<reformat-truncate-scheduled-times>>=
dep_time_number <- as.numeric(as.character(predictDataTyped$scheduled_departure_time))
predictDataTyped$scheduled_departure_time <- as.factor(sprintf("%04i", dep_time_number))

arr_time_number <- as.numeric(as.character(predictDataTyped$scheduled_arrival_time))
predictDataTyped$scheduled_arrival_time <- as.factor(sprintf("%04i", arr_time_number))

predictDataTyped$scheduled_departure_time <- as.factor(
  substr(as.character(predictDataTyped$scheduled_departure_time),1,2))
predictDataTyped$scheduled_arrival_time <- as.factor(
  substr(as.character(predictDataTyped$scheduled_arrival_time),1,2))

# remainin levels are:
levels(predictDataTyped$scheduled_departure_time)
levels(predictDataTyped$scheduled_arrival_time)
@

I also again reformat the variables \verb+day_of_month+ and \verb+month+:
<<reformat-dates>>=
predictDataTyped$month <- as.factor(
  sprintf("%02i", as.numeric(as.character(predictDataTyped$month))))
predictDataTyped$day_of_month <- as.factor(
  sprintf("%02i", as.numeric(as.character(predictDataTyped$day_of_month))))
@

Comparing factor levels of training and prediction data is important because if I train a model on data with levels that don't exist in the prediction data the prediction phase might fail.

<<compute-predict-levels, include=FALSE>>=
pFactorLevels <- sapply(predictDataTyped, FUN=levels)
pFactorLevels <- pFactorLevels[factorNames]
@

<<load-train-levels, include=FALSE>>=
load("../01_exploratory_data_analysis/factorLevels.RData")
load("../01_exploratory_data_analysis/trainDataTyped.RData")
tFactorLevels <- factorLevels[factorNames]
rm(factorLevels)
@

Find levels that exist in the historic fligh data set but are missing in the scheduled flight data set:
<<missing-levels-in-predict>>=
pMissingLevels <- lapply(factorNames, 
                        FUN=function(list1, list2, x) { setdiff(list1[[x]], list2[[x]]) }, 
                        list1=tFactorLevels, list2=pFactorLevels)
names(pMissingLevels) <- factorNames
@

Find levels that don't exist in the historic fligh data set but do exist in the scheduled flight data set:
<<missing-levels-in-train>>=
tMissingLevels <- lapply(factorNames, 
                        FUN=function(list1, list2, x) { setdiff(list1[[x]], list2[[x]]) }, 
                        list1=pFactorLevels, list2=tFactorLevels)
names(tMissingLevels) <- factorNames
@

<<define-venn-diagram-function, include=FALSE>>=
require(limma)
Venn2 <- function(set1, set2, setnames, title) {
  stopifnot(length(setnames) == 2)
  universe <- sort( unique( c(set1, set2) ) )
  Counts <- matrix(NA, nrow=length(universe), ncol=2)
  colnames(Counts) <- setnames
  for (i in 1:length(universe))
  {
    Counts[i,1] <- universe[i] %in% set1
    Counts[i,2] <- universe[i] %in% set2
  }
  vc <- vennCounts(Counts)
  vc[1,] <- rep(NA,3)
  vennDiagram(vc, circle.col=c("orange1", "blue3"), mar=rep(0,4), cex=c(3.5,3,2))
  text(0, 3, title, cex=4)
}
@

<<plot-venn-diagrams, echo=FALSE, fig.width=11, fig.height=8, out.width='.45\\linewidth'>>=>=
for (name in factorNames) {
  Venn2(pFactorLevels[[name]], tFactorLevels[[name]], c("predict", "train"), name)
}
@

<<list-differences, echo=FALSE>>=
nbLevels <- sapply(tFactorLevels, FUN=length)
nbLevels
nbTMissingLevels <- sapply(tMissingLevels, FUN=length) 
nbPMissingLevels <- sapply(pMissingLevels, FUN=length) 
haveMissingLevels <- sort(union(which(nbTMissingLevels!=0), which(nbPMissingLevels!=0)))
suitable <- intersect(unname(which(nbLevels<300)), haveMissingLevels)
factorNames[suitable]
overview <- list()
for (name in factorNames[suitable]) {
  onlyInPredict <- tMissingLevels[[name]]
  onlyInTrain <- pMissingLevels[[name]]
  nbRows <- max(length(onlyInPredict), length(onlyInTrain))
  length(onlyInPredict) <- nbRows
  length(onlyInTrain) <- nbRows
  overview[[name]] <- cbind(onlyInPredict, onlyInTrain)
}
overview
@

\pagebreak

See summary of descriptive statistics of the scheduled data: 
%this takes about 12 seconds
<<summary-scheduled-data>>=
summary(predictDataTyped)
@

Save data frame for next step:
<<save-df>>==
save(predictDataTyped, file="predictDataTyped.RData")
@

<<setup-plot-data, include=FALSE>>=
dataTyped <- predictDataTyped
@

<<general-plots, child='general_plots.Rnw'>>=
@

<<remove-plot-data, include=FALSE>>=
rm(dataTyped)
@

\end{document}

% create the exploratory_data_analysis_scheduled.tex with (takes about 4 minutes!)
% library(knitr)
% knit("../01_exploratory_data_analysis/exploratory_data_analysis_scheduled.Rnw", output="../01_exploratory_data_analysis/exploratory_data_analysis_scheduled.tex")