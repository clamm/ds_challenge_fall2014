\documentclass{article}
\usepackage[sc]{mathpazo}
\usepackage[T1]{fontenc}
\usepackage{geometry}
\geometry{verbose,tmargin=2.5cm,bmargin=2.5cm,lmargin=2.5cm,rmargin=2.5cm}
\usepackage{fullpage}
\usepackage{pdflscape}
\setcounter{secnumdepth}{2}
\setcounter{tocdepth}{2}
\usepackage{datetime}
\usepackage{url}
\usepackage[unicode=true,pdfusetitle,
 bookmarks=true,bookmarksnumbered=true,bookmarksopen=true,bookmarksopenlevel=2,
 breaklinks=false,pdfborder={0 0 1},backref=false,colorlinks=false]
 {hyperref}
\hypersetup{
 pdfstartview={XYZ null null 1}}
\begin{document}
\flushbottom

<<setup, include=FALSE, cache=FALSE>>=
library(knitr)
library(ggplot2)
library(plyr)
# set global chunk options
opts_chunk$set(fig.path='figure/historic-', fig.align='center', fig.show='hold')
options(formatR.arrow=TRUE,width=90)
@

\date{\currenttime, \today}
\title{SmartFly: Exploratory Analysis For Historic Flight Data}
\author{Cindy Lamm}

\maketitle

First load variable names and types of historic data (prepared in an additional csv file):
<<setup-defaults, include=FALSE>>==
rm(list=ls())   #clear memory
@

<<load-meta-data>>=
nameTypeDataFile  <- "resources/raw_variables.csv"
variableNames <- read.csv(nameTypeDataFile, header=TRUE, stringsAsFactors=FALSE) 
variableNames
factorIdx <- which(variableNames$type=="factor")
factorNames <- variableNames$name[factorIdx]
@

Then load historic data into R. I set empty strings to \verb+NA+ (since I saw in the first rough analysis of the data on the command line that at least \verb+cancellation_code+ contains empty spaces).
% this takes about 2 minutes 
<<load-historic-data>>=
historicDataFile <- "../../data/smartfly_historic.csv"
# historicDataFile <- "../../data/mod4000.csv"
trainDataTyped <- read.csv(historicDataFile, header=FALSE, stringsAsFactors=FALSE, 
                           col.names=variableNames$name, colClasses=variableNames$type,
                           na.strings=c("NA",""))
# convert integer to logical
trainDataTyped$cancelled <- as.logical(trainDataTyped$cancelled)  
@

Checkout data content:
<<str-historic-data>>=
str(trainDataTyped)
@

Specifically note the factor levels for the different variables\footnote{The number of levels matters if I would want to create a dummy variable for each level. With lots of levels the number of variables would be HUGE and so would be the sparsity of the design matrix.}.
I see that \verb+scheduled_departure_time+ and \verb+scheduled_arrival_time+ need to be reformatted to have for all observations values that are 4 characters long (assuming "100" means "0100" and thus a time of 01h00):
<<reformat-scheduled-times>>=
dep_time_number <- as.numeric(as.character(trainDataTyped$scheduled_departure_time))
trainDataTyped$scheduled_departure_time <- as.factor(sprintf("%04i", dep_time_number))

arr_time_number <- as.numeric(as.character(trainDataTyped$scheduled_arrival_time))
trainDataTyped$scheduled_arrival_time <- as.factor(sprintf("%04i", arr_time_number))
@

In addition I truncate the scheduled times to the hour:
<<group-scheduled-times>>=
trainDataTyped$scheduled_departure_time <- as.factor(
  substr(as.character(trainDataTyped$scheduled_departure_time),1,2))
trainDataTyped$scheduled_arrival_time <- as.factor(
  substr(as.character(trainDataTyped$scheduled_arrival_time),1,2))

# remaining levels are:
levels(trainDataTyped$scheduled_departure_time)
levels(trainDataTyped$scheduled_arrival_time)
@

I notice that there is hour "$00$" and "$24$", I consolidate this into "$00$" (and remove level "$24$":
<<move-levels, echo=1:11>>=
replace24with00 <- function(column) {
  moveIdx <- which(column=="24")
  column[moveIdx] <- "00"
  removeIdx <- which(levels(column) == "24")
  levels(column)[removeIdx] <- NA
  return(column)
}
trainDataTyped$scheduled_departure_time <- replace24with00(trainDataTyped$scheduled_departure_time)
trainDataTyped$scheduled_arrival_time <- replace24with00(trainDataTyped$scheduled_arrival_time)
@

I also reformat the variables \verb+day_of_month+ and \verb+month+ (so that they're ordered automatically in graphs):
<<reformat-dates>>=
trainDataTyped$month <- as.factor(
  sprintf("%02i", as.numeric(as.character(trainDataTyped$month))))
trainDataTyped$day_of_month <- as.factor(
  sprintf("%02i", as.numeric(as.character(trainDataTyped$day_of_month))))
@

\pagebreak

See summary of descriptive statistics of the historic data: 
%this takes about 12 seconds
<<summary-historic-data>>=
summary(trainDataTyped)
@

<<setup-plot-data, include=FALSE>>=
dataTyped <- trainDataTyped
@

<<general-plots, child='general_plots.Rnw'>>=
@

<<remove-plot-data, include=FALSE>>=
rm(dataTyped)
@


%-------------------------------------------------------------------------------
%-------  PART THAT CANNOT BE APPLIED TO SCHEDULED DATA
%-------------------------------------------------------------------------------

Since I want to predict whether a flight is delayed or not I create a specific variable \verb+is_delayed+ based on \verb+departure_delay+ using the definition that only positive delay and non-cancelled flights count as "delayed":
<<create-target-variable>>=
trainDataTyped$is_delayed <- factor(trainDataTyped$departure_delay > 0 
                                    & trainDataTyped$cancelled==FALSE, 
                                    labels= c("on_time", "delayed")) 
summary(trainDataTyped$is_delayed)

summary(trainDataTyped$is_delayed) / length(trainDataTyped$is_delayed)
@


Save data frame for next step:
<<save-df>>==
factorLevels <- sapply(trainDataTyped, FUN=levels)
save(trainDataTyped, factorLevels, file="trainDataTyped.RData")
@


Plot the data:
<<calculate-delayed-proportions-per-group, echo=FALSE>>=
delayed_proportion_per_group <- function(variable_idx) {
  apply(table(trainDataTyped$is_delayed, trainDataTyped[,variable_idx]), 
        MARGIN=2, FUN=function(x){x/sum(x)})[2,]
}
delayed_props <- lapply(factorIdx, FUN=delayed_proportion_per_group)
names(delayed_props) <- factorNames
@

% already defined in general_plots.Rnw
% <<redefine-themes, include=FALSE>>=
% th_small <- theme(text=element_text(size=36), axis.title=element_text(face="bold"))
% th_large <- theme(text=element_text(size=24), axis.title=element_text(face="bold"))
% th_extra_large <- theme(text=element_text(size=76), 
%                         axis.text=element_blank(),
%                         axis.title=element_text(face="bold"))
% @

<<plot-delayed-proportion, include=FALSE>>=
plot_delayed_proportion <- function(delayed_props_list, variable_name, cex) { 
  opar <- par(mar=c(5,4,4,12))
  plot(delayed_props_list[[variable_name]], xlab=variable_name, ylab="% delayed",
       t="o", xaxt="n", bty="n", ylim=c(0,1), cex.lab=cex, cex.axis=cex, lwd=3)
  labels=names(delayed_props_list[[variable_name]])
  axis(1, at=1:length(labels), labels=labels, las=2, cex.axis=cex)
  par(opar)
} 
@

<<plot-year-month-delayed, echo=FALSE, fig.width=11, fig.height=8, out.width='.4\\linewidth'>>=
plot_delayed_proportion(delayed_props, "year", 2)
plot_delayed_proportion(delayed_props, "month", 2)
ggplot(data=trainDataTyped, aes(x=year, fill=is_delayed)) + 
  geom_bar(stat="bin", position=position_dodge()) + th_small
ggplot(data=trainDataTyped, aes(x=month, fill=is_delayed)) + 
  geom_bar(stat="bin", position=position_dodge()) + th_small
@

<<plot-day-delayed, echo=FALSE, fig.width=11, fig.height=8, out.width='.4\\linewidth'>>=
plot_delayed_proportion(delayed_props, "day_of_week", 2)
plot_delayed_proportion(delayed_props, "day_of_month", 2)
ggplot(data=trainDataTyped, aes(x=day_of_week, fill=is_delayed)) + 
  geom_bar(stat="bin", position=position_dodge()) + th_small
ggplot(data=trainDataTyped, aes(x=day_of_month, fill=is_delayed)) + 
  geom_bar(stat="bin", position=position_dodge()) + th_small
@


<<plot-data-time-delayed, echo=FALSE, fig.width=16, fig.height=4, out.width='.9\\linewidth'>>=
plot_delayed_proportion(delayed_props, "scheduled_departure_time", 2)
ggplot(data=trainDataTyped, aes(x=scheduled_departure_time, fill=is_delayed)) + 
  geom_bar(stat="bin", position=position_dodge()) + th_large
plot_delayed_proportion(delayed_props, "scheduled_arrival_time", 2)
ggplot(data=trainDataTyped, aes(x=scheduled_arrival_time, fill=is_delayed)) + 
  geom_bar(stat="bin", position=position_dodge()) + th_large
@

<<plot-data-airline-delayed, echo=FALSE, fig.width=16, fig.height=4, out.width='.9\\linewidth'>>=
plot_delayed_proportion(delayed_props, "airline", 2)
ggplot(data=trainDataTyped, aes(x=airline, fill=is_delayed)) + 
  geom_bar(stat="bin", position=position_dodge()) + th_large
@

<<plot-data-plane-delayed, echo=FALSE, fig.width=11, fig.height=8, out.width='.4\\linewidth'>>=
plot_delayed_proportion(delayed_props, "plane_model", 2)
plot_delayed_proportion(delayed_props, "seat_configuration", 2)
ggplot(data=trainDataTyped, aes(x=plane_model, fill=is_delayed)) + 
  geom_bar(stat="bin", position=position_dodge()) + th_small
ggplot(data=trainDataTyped, aes(x=seat_configuration, fill=is_delayed)) + 
  geom_bar(stat="bin", position=position_dodge()) + scale_x_discrete(labels=abbreviate)+ th_small
@

The variables \verb+flight_number+ and \verb+tail_number+ don't produce any valuable plots due to their large number in levels.


\begin{landscape}
<<plot-data-airports-delayed, echo=FALSE, fig.width=80, fig.height=12, out.width='1.0\\linewidth', warning=FALSE>>=
plot_delayed_proportion(delayed_props, "origin_airport", 2)
ggplot(data=trainDataTyped, aes(x=origin_airport, fill=is_delayed)) + 
  geom_bar(stat="bin") + th_extra_large
plot_delayed_proportion(delayed_props, "destination_airport", 2)
ggplot(data=trainDataTyped, aes(x=destination_airport, fill=is_delayed)) + 
  geom_bar(stat="bin") + th_extra_large
@
\vspace{3 mm}

% not included since hard to compress the info
<<analyse-airports-delayed, include=FALSE>>=
contingency_orig <- table(trainDataTyped$origin_airport, trainDataTyped$is_delayed)
total_per_airport_orig <- table(trainDataTyped$origin_airport)
propotions_orig <- apply(contingency_orig, MARGIN=2, FUN=function(x, n){x/total_per_airport_orig})

contingency_dest <- table(trainDataTyped$destination_airport, trainDataTyped$is_delayed)
total_per_airport_dest <- table(trainDataTyped$destination_airport)
propotions_dest <- apply(contingency_dest, MARGIN=2, FUN=function(x){x/total_per_airport_dest})
@

<<continous-hist-delayed, echo=FALSE, fig.width=12, fig.height=8, out.width='.32\\linewidth'>>=
ggplot(trainDataTyped, aes(distance_travelled, fill = is_delayed)) + 
  geom_density(alpha=0.2) + th_small
ggplot(trainDataTyped, aes(taxi_time_in, fill = is_delayed)) + 
  geom_density(alpha=0.2) + th_small
ggplot(trainDataTyped, aes(taxi_time_out, fill = is_delayed)) + 
  geom_density(alpha=0.2) + th_small
@
\vspace{2 mm}

<<continous-median-delayed, echo=FALSE, fig.width=12, fig.height=8, out.width='.32\\linewidth'>>=
stats <- ddply(trainDataTyped, .(is_delayed), summarize,  
      median_distance_travelled=median(distance_travelled),
      median_taxi_time_in=median(taxi_time_in),
      median_taxi_time_out=median(taxi_time_out))

ggplot(stats, aes(x=is_delayed, y=median_distance_travelled, fill=is_delayed)) +
  geom_bar(colour="black", stat="identity", width=0.5) + th_small +
  guides(fill=FALSE) # disable legend since redundant info

ggplot(stats, aes(x=is_delayed, y=median_taxi_time_in, fill=is_delayed)) +
  geom_bar(colour="black", stat="identity", width=0.5) + th_small +
  guides(fill=FALSE) # disable legend since redundant info

ggplot(stats, aes(x=is_delayed, y=median_taxi_time_out, fill=is_delayed)) +
  geom_bar(colour="black", stat="identity", width=0.5) + th_small +
  guides(fill=FALSE) # disable legend since redundant info
@
\end{landscape}


Look at correlations between continuous variables:
<<example-variable-correlation>>=
cor(trainDataTyped$departure_delay, trainDataTyped$distance_travelled, use="pairwise.complete.obs")
cor(trainDataTyped$departure_delay, trainDataTyped$taxi_time_in, use="pairwise.complete.obs")
cor(trainDataTyped$departure_delay, trainDataTyped$taxi_time_out, use="pairwise.complete.obs")
@


<<set-alpha, include=FALSE>>=
ALPHA <- 0.001
@

Look at some dependency between the binary target variable and other factor variables (with reasonably few levels) using the Chi-Square test of independence. The null hypothesis is that the two variables are independent, which I reject if the p-value is smaller than $\alpha=\Sexpr{ALPHA}$ (chosen so small due to large sample size):
<<prepare-chisqare-independence, include=FALSE>>=
nbLevels <- sapply(factorLevels, FUN=length)
suitable <- which(nbLevels < 300)
testIndependence <- function(col, alpha){
  result <- chisq.test(table(trainDataTyped$is_delayed, trainDataTyped[,col]))
  return(result$p.value < alpha)
}
dependentWithTarget <- sapply(suitable, FUN=testIndependence, alpha=ALPHA)
names(dependentWithTarget) <- variableNames$name[suitable]
@

<<result-chisqare-independence>>=
dependentWithTarget
@

\end{document}

% create the exploratory_data_analysis_historic.tex with (takes about 4 minutes!)
% library(knitr)
% knit("../01_exploratory_data_analysis/exploratory_data_analysis_historic.Rnw", output="../01_exploratory_data_analysis/exploratory_data_analysis_historic.tex")