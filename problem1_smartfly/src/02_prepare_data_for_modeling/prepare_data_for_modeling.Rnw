\documentclass{article}
\usepackage[sc]{mathpazo}
\usepackage[T1]{fontenc}
\usepackage{geometry}
\geometry{verbose,tmargin=2.5cm,bmargin=2.5cm,lmargin=2.5cm,rmargin=2.5cm}
\setcounter{secnumdepth}{2}
\setcounter{tocdepth}{2}
\usepackage{datetime}
\usepackage{url}
\usepackage[unicode=true,pdfusetitle,
 bookmarks=true,bookmarksnumbered=true,bookmarksopen=true,bookmarksopenlevel=2,
 breaklinks=false,pdfborder={0 0 1},backref=false,colorlinks=false]
 {hyperref}
\hypersetup{
 pdfstartview={XYZ null null 1}}
\begin{document}
<<setup, include=FALSE, cache=FALSE>>=
library(knitr)
# set global chunk options
opts_chunk$set(fig.path='figure/', fig.align='center', fig.show='hold')
options(formatR.arrow=TRUE,width=90)
@

\date{\currenttime, \today}
\title{SmartFly: Prepare Data For Modeling}
\author{Cindy Lamm}

\maketitle

Load preprocessed data from the previous step "Exploratory Analysis For Historic Flight Data"
<<load-typed-data>>=
rm(list=ls())   #clear memory
load("../01_exploratory_data_analysis/trainDataTyped.RData")
modelData <- trainDataTyped
rm(trainDataTyped)
@

\section{Remove variables that don't help with prediction}

Before I do an analysis of how many rows contain any missing values, I remove the variables that I won't use for estimating the model. I exlcude the variables \verb+departure_delay+, \verb+taxi_time_in+, \verb+taxi_time_out+, \verb+cancelled+, \verb+cancellation_code+ because they are not available in the scheduled flight data.

<<remove-no-helping-variables>>=
nonAvailable <- c("departure_delay", "taxi_time_in", "taxi_time_out", 
                  "cancelled", "cancellation_code")
excludeIdx <- sapply(nonAvailable, FUN=function(v, x){ which(v==x) }, v=names(modelData))
modelData <- modelData[,-excludeIdx]
str(modelData)
@

Note: I don't exclude the variable \verb+id+ from the data since I need it for identification. However I won't use it for estimation because I assume it is randomly assigned to the observation and has no predictive power regarding the delay of a flight.

\section{Remove variables due to randomForest constraint}

Since I will use the \verb+randomForest+\footnote{\url{http://www.stat.berkeley.edu/~breiman/RandomForests/cc_manual.htm}} package I also remove the factor variables that have more than 53 levels since otherwise an error occurs.
<<remaining-factors>>=
modelFactorIdx <- which(sapply(modelData, FUN=class) == "factor")
modelFactorLevels <- sapply(modelData, FUN=levels)
nbLevels <- sapply(modelFactorLevels, FUN=length)
suitable <- which(nbLevels < 53) # condition for this randomForest implementation
rfModelData <- modelData[,suitable]
rm(modelData)
@

So the variables that I use for the estimation of a random forest are as follows:
<<final-model-data>>=
str(rfModelData)
@

I save these variable names for the prediction step since I use the same variable base for prediction and modeling:
<<save-rf-model-variables>>=
modelVariables <- names(rfModelData)
save(modelVariables, file="../02_prepare_data_for_modeling/modelVariables.RData")
@

\section{Convert date and time related variables from factors to numbers}
When predicting from a randomForest it expects the same factor levels to be present in the training and prediction data set. For dates and times I can work around that by using numeric values instead of factor levels.

<<convert-dates-and-times-to-numeric, echo=7>>=
rfModelData$year <- as.numeric(as.character(rfModelData$year))
rfModelData$month <- as.numeric(as.character(rfModelData$month))
rfModelData$day_of_month <- as.numeric(as.character(rfModelData$day_of_month))
rfModelData$day_of_week <- as.numeric(as.character(rfModelData$day_of_week))
rfModelData$scheduled_departure_time <- as.numeric(as.character(rfModelData$scheduled_departure_time))
rfModelData$scheduled_arrival_time <- as.numeric(as.character(rfModelData$scheduled_arrival_time))
str(rfModelData)
@

\section{Equalize factor levels with scheduled flight data}

There are two more airline codes in the scheduled flight data. I add these as levels to the modeling data, so that upon the prediction stage there won't be the error, that there are levels that didn't exist in the modeling stage: 
<<remove-new-airlines>>=
addNames <- c("HA","OH")
levels(rfModelData$airline) <- c(levels(rfModelData$airline), addNames)
levels(rfModelData$airline)
@

\textbf{Assumption}:
I assume it doesn't make a difference in which order the levels are. Because in the training data the new levels are last, in the prediction data they are inbetween (due to alphabetical order).


\section{Analyse \& deal with missing values}

Check for missing values in any of the remaining variables:
<<check-na-removal>>=
nbRows <- dim(rfModelData)[1]
rowHasNa <- apply(rfModelData, MARGIN=1, FUN=function(row){ any(is.na(row)) })
nbRowsWithNa <- sum(rowHasNa)
nbRowsLeft <- nbRows - nbRowsWithNa
# proportion of NA rows:
nbRowsWithNa / nbRows
@

There are no rows with missing values (after we deleted variables that we won't use for modeling anyway).

I save the model data for the estimation step:
<<save-rf-model-data>>=
save(rfModelData, file="../02_prepare_data_for_modeling/rfModelData.RData")
@


\end{document}

% create the .tex with (takes about 3 minutes)
% knit("../02_prepare_data_for_modeling/prepare_data_for_modeling.Rnw", output="../02_prepare_data_for_modeling/prepare_data_for_modeling.tex")